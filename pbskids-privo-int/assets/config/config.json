{
	"assets": {
		"title": [
			{
				"id": "TitleBackground",
				"src": "assets/images/TitleBackground.jpg"
			},
			{
				"id": "PlayButton",
				"src": "assets/images/PlayButton.png"
			}
		],
		"game": []
	},
	"gameSettings": {
		"snapThreshold": 125,
		"tweenRate": 500,
		"limitShrooms": true
	},
	"openid" : {
		"client_id": "lbfSinpDd0rthi30LjQe8PmFU9nYCH6U",
		"provider_url": "https://privohub-int.privo.com/authorize",
		"response_type": "id_token token",
		"scope": "openid profile user_profile additional_info",
		"redirect_uri": "http://dev.pbskids.org/openid/token.html",
		"site_id": "2221",
		"clients": [
			{
				"name": "PBS KIDS",
				"redirect_uri": "http://dev.pbskids.org/go/apps/auth/login/",
				"scope": "openid profile user_profile additional_info",
				"response_type": "code"
			},
			{
				"name": "Kidaptive ALP",
				"provider_url": "https://develop.kidaptive.com/v3/openid/user/web",
				"api_key": "gLT3kMNM8BmTDrdVpWGD3N12VzAZPO6C",
				"redirect_uri": "https://kidapt.github.io/kidaptive-sdk-js-demo/pbskids-privo-int/alp_landing.html",
				"client_id": null,
				"nonce": null
			}
		]
	},
	"scaling": {
		"transition": {
			"align": "center"
		},
		"game": {
			"scalingPanel": {
				"titleSafe": true,
				"align": "top-left"
			}
		}
	},
	"scalingSize": {
		"width": 1024,
		"height": 660,
		"maxWidth": 1382,
		"maxHeight": 768
	},
	"sounds": {
		"music": {
			"context": "music",
			"path": "assets/sound/music/",
			"sounds": []
		},
		"sfx": {
			"context": "sfx",
			"path": "assets/sound/sfx/",
			"sounds": [
				"SFX_completedtask",
				"SFX_correctanswer",
				"SFX_donebutton",
				"SFX_mushroomclick",
				"SFX_mushroomplace",
				"SFX_mushroompop",
				"SFX_wronganswer"
			]
		},
		"vo": {
			"context": "vo",
			"path": "assets/sound/vo/",
			"sounds": [
				"Dot_PullMushrooms",
				"Dot_PickFinger",
				"Dot_ThatsOne",
				"Dot_Two",
				"Dot_AndThree",
				"Dot_ShortHereTallHere",
				"Dot_DragStumps",
				"Dot_CheckTapHere",
				"Dot_NotShortToTall",
				"Dot_TheseLinesShow",
				"Dot_AlrightThisLittleThisBig"
			]
		}
	},
	"spec": {
		"gameId": "bef0c705-01ca-4af5-8bd8-09197a812795",
		"version": "1.0",
		"events": {
			"2000": {
				"info": "The start game event is triggered at the very beginning of the level (after the game finishes loading, don't wait for intro movie to finish). This is used to compute things like time spent in game.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "identifier of the current version of the game being played",
						"type": "string",
						"name": "version"
					}
				],
				"id": "b03ded72-4956-461d-904f-db414a6d2782"
			},
			"2010": {
				"info": "The exit game event is triggered when the game is quit. This is used to compute things like time spent in game. Depending on platform this may / may not be possible. NOTE: “quit” also means navigating away from game. ",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "session_duration"
					}
				],
				"id": "d926b6fb-4a54-4861-b3bd-d138af847f9f"
			},
			"2020": {
				"info": "The start round event is triggered at the start of a round when the player is to arrange the mushrooms on the stumps. There is only one round per playthrough? This event provides information about the game characteristics of the round (i.e. resources, objectives, setup). It is used in calculating things like time spent in a round (for speed and accuracy), attempts at solving a round, and the number of rounds the player has visited (exposures).",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					}
				],
				"id": "e96dfb31-5b34-4240-b3e2-cdd1a3fc566c"
			},
			"2025": {
				"info": "The start picking mushrooms event is triggered when the player is prompted to pick mushrooms. This event indicates a section of gameplay separate from the arranging section of gameplay.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					}
				],
				"id": "f59b6aef-0ead-4b2e-ba44-956912429d05"
			},
			"2030": {
				"info": "The beat round event is triggered when the player finishes a round by correctly arranging the mushrooms and submitting the solution. This event is used for calculating time spent in a round (for speed and accuracy), attempts at solving a round, and the number of rounds the player has completed (completion).",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the duration of the round in milliseconds. Time between start round and beat round.",
						"type": "int",
						"name": "duration"
					},
					{
						"info": "the number of times the done button was pressed with the mushrooms in the wrong location",
						"type": "int",
						"name": "misses"
					}
				],
				"id": "46aeef91-99ca-494e-a073-a867e13b8549"
			},
			"2035": {
				"info": "The beat round event is triggered when the player finishes picking mushrooms. This event indicates a section of gameplay separate from the arranging section of gameplay.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the duration of the picking in milliseconds. Time between start picking and finish picking.",
						"type": "int",
						"name": "duration"
					}
				],
				"id": "329b99e4-011c-4fbc-b65c-38abb1a03b19"
			},
			"2080": {
				"info": "The movie started event triggers when an intro or outro movie starts to play. It identifies the movie being played. This is used to determine how long players spend watching the movies (more relevant after the first play through when the skip option is available). The movie_id should be a string composed of the voiceover audio id, and the number and type of each animal with colon separators. Example: “goodjob:2_chicken:1_cow”",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the identifier for the movie that was playing",
						"type": "string",
						"name": "movie_id"
					},
					{
						"info": "the duration of the media playback in milliseconds",
						"type": "int",
						"name": "duration"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					}
				],
				"id": "1ac686c0-24c2-4bad-aa1f-cd59c369363d"
			},
			"2081": {
				"info": "The movie skipped event triggers when the player presses the skip button during an intro or outro movie. It identifies the movie being played. This is used to determine how long players spend watching the movies (more relevant after the first play through when the skip option is available). The movie_id should be a string composed of the voiceover audio id, and the number and type of each animal with colon separators. Example: “goodjob:2_chicken:1_cow”",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the identifier for the movie that was playing",
						"type": "string",
						"name": "movie_id"
					},
					{
						"info": "the duration of the media playback in milliseconds",
						"type": "int",
						"name": "duration"
					},
					{
						"info": "the time the media has been playing milliseconds when the button is pressed",
						"type": "int",
						"name": "time_played"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					}
				],
				"id": "373487db-ce64-49e1-95b3-e4ecdae3c081"
			},
			"2083": {
				"info": "The movie ended event triggers when an intro or outro movie ends. It identifies the movie being played. This is used to determine how long players spend watching the movies (more relevant after the first play through when the skip option is available). The movie_id should be a string composed of the voiceover audio id, and the number and type of each animal with colon separators. Example: “goodjob:2_chicken:1_cow”",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the identifier for the movie that was playing",
						"type": "string",
						"name": "movie_id"
					},
					{
						"info": "the duration of the media playback in milliseconds",
						"type": "int",
						"name": "duration"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					}
				],
				"id": "57470995-331c-453e-9d75-76c222fdf30b"
			},
			"3010": {
				"info": "The system-initiated instruction event occurs when the game delivers instructions to the player. It contains information that describes the content of the instruction. This event differs from events 3020 and 3021 as it captures instructions that are not given in response to player action. These events are used to determine the effectiveness of the instructions. We can answer questions like, \"did players who received instruction X do better than those who did not?\"",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					},
					{
						"info": "a unique identifier for this piece of instruction",
						"type": "string",
						"name": "identifier"
					},
					{
						"info": "the type of media that has just played:\n'audio' || 'animation' || 'other'",
						"type": "string",
						"name": "media_type"
					},
					{
						"info": "the estimated duration of the media playback in milliseconds (if it ran uninterrupted)",
						"type": "int",
						"name": "total_duration"
					}
				],
				"id": "38e41ed6-8bb9-4e9e-8f17-1bd751ae6598"
			},
			"3020": {
				"info": "The system-initiated feedback (Incorrect) event occurs when the game starts delivering feedback to the player in response to an incorrect round attempt (pressing the go button with the incorrect answer). It contains information that describes the content of the instruction. These events are used to determine the effectiveness of the feedback. We can answer questions like, \"did players who received feedback X do better than those who did not?\"",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					},
					{
						"info": "a unique identifier for this piece of instruction",
						"type": "string",
						"name": "identifier"
					},
					{
						"info": "the type of media that has just played:\n'audio' || 'animation' || 'other'",
						"type": "string",
						"name": "media_type"
					},
					{
						"info": "the estimated duration of the media playback in milliseconds (if it ran uninterrupted)",
						"type": "int",
						"name": "total_duration"
					}
				],
				"id": "4c40cf5c-3a18-45fe-8985-e5b83eb7e6bf"
			},
			"3021": {
				"info": "The system-initiated feedback (Correct) event occurs when the game starts delivering feedback to the player in response to a correct round attempt (pressing the go button with the correct answer). It contains information that describes the content of the instruction, and will likely occur in conjunction with a beat round event. These events are used to determine the effectiveness of the feedback. We can answer questions like, \"did players who received feedback X do better than those who did not?\"",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					},
					{
						"info": "a unique identifier for this piece of instruction",
						"type": "string",
						"name": "identifier"
					},
					{
						"info": "the type of media that has just played:\n'audio' || 'animation' || 'other'",
						"type": "string",
						"name": "media_type"
					},
					{
						"info": "the estimated duration of the media playback in milliseconds (if it ran uninterrupted)",
						"type": "int",
						"name": "total_duration"
					}
				],
				"id": "3f64fc2c-3de6-4056-94d1-e31a5f66ca01"
			},
			"3110": {
				"info": "The end of system-initiated instruction event occurs when the game finishes delivering instructions to the player. It contains information that describes the content of the instruction including duration. These events are used to determine the effectiveness of the instructions and the amount of time they consume. We can answer questions like, \"how much time elapsed while the game was presenting instruction?\"",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					},
					{
						"info": "a unique identifier for this piece of instruction",
						"type": "string",
						"name": "identifier"
					},
					{
						"info": "the type of media that has just played:\n'audio' || 'animation' || 'other'",
						"type": "string",
						"name": "media_type"
					},
					{
						"info": "the duration of the media playback in milliseconds",
						"type": "int",
						"name": "duration"
					}
				],
				"id": "88365543-746e-4175-8f78-2514416b1d6c"
			},
			"3120": {
				"info": "The end of system-initiated feedback (Incorrect) event occurs when the game finishes delivering feedback to the player in response to an incorrect round attempt (pressing the go button with the incorrect answer). It contains information that describes the content of the instruction. These events are used to determine the effectiveness of the feedback. We can answer questions like, \"how much time elapsed while the game was presenting feedback?\"",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					},
					{
						"info": "a unique identifier for this piece of instruction",
						"type": "string",
						"name": "identifier"
					},
					{
						"info": "the type of media that has just played:\n'audio' || 'animation' || 'other'",
						"type": "string",
						"name": "media_type"
					},
					{
						"info": "the duration of the media playback in milliseconds",
						"type": "int",
						"name": "duration"
					}
				],
				"id": "a6cceedf-aed8-4928-be1b-4b046754a387"
			},
			"3121": {
				"info": "The end of system-initiated feedback (Correct) event occurs when the game finishes delivering feedback to the player in response to a correct round attempt (pressing the go button with the correct answer). It contains information that describes the duration and content of the instruction, and will likely occur in conjunction with a beat round event. These events are used to determine the effectiveness of the feedback. We can answer questions like, \"how much time elapsed while the game was presenting feedback?\"",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the text or description of the instruction",
						"type": "string",
						"name": "description"
					},
					{
						"info": "a unique identifier for this piece of instruction",
						"type": "string",
						"name": "identifier"
					},
					{
						"info": "the type of media that has just played:\n'audio' || 'animation' || 'other'",
						"type": "string",
						"name": "media_type"
					},
					{
						"info": "the duration of the media playback in milliseconds",
						"type": "int",
						"name": "duration"
					}
				],
				"id": "555c3c7a-47be-47d1-ba0f-50657b2ddbda"
			},
			"4010": {
				"info": "This event occurs when the player clicks to start the game from the starting screen.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the game screen coordinates of the click\r\ndictionary:\r\n{“x”: integer, “y”: integer, “stage_width”: integer, “stage_height”: integer}",
						"type": "object",
						"name": "coordinates"
					}
				],
				"id": "ce37ba71-f484-430b-9595-58f82d342516"
			},
			"4020": {
				"info": "This event occurs when the player places a mushroom on one of the three stumps. It contains information about the mushroom that was placed, the correctness of the action, and where the placement occurred. This event is used to calculate accuracy and to diagnose player strategies and understanding.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "height of the mushroom that was placed",
						"type": "int",
						"name": "height"
					},
					{
						"info": "“left”, “middle”, or “right” - stump the mushroom was dragged to",
						"type": "string",
						"name": "destination"
					},
					{
						"info": "list of mushroom heights placed on the stumps from left to right after the placement occurs",
						"type": "array->int",
						"name": "stumps"
					},
					{
						"info": "is this the correct stump for this mushroom?",
						"type": "boolean",
						"name": "correct"
					},
					{
						"info": "“left”, “middle”, “right” or “resources” - location the mushroom was dragged from",
						"type": "string",
						"name": "source"
					},
					{
						"info": "the duration of the drag in milliseconds",
						"type": "int",
						"name": "duration"
					},
					{
						"info": "the game screen coordinates of the placement\n{“x”: integer, “y”: integer, “stage_width”: integer, “stage_height”: integer}",
						"type": "object",
						"name": "coordinates"
					}
				],
				"id": "7fd86bbe-7392-4ad0-9a2c-a7e57eb4bd75"
			},
			"4025": {
				"info": "This event occurs when the player picks one of the mushrooms in the resource area. It contains information about the mushroom that was picked and where the click occurred.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "height of the mushroom that was placed",
						"type": "int",
						"name": "height"
					},
					{
						"info": "the game screen coordinates of the placement\n{“x”: integer, “y”: integer, “stage_width”: integer, “stage_height”: integer}",
						"type": "object",
						"name": "coordinates"
					}
				],
				"id": "211fe620-c84a-49b6-afec-c00a1d49ebf4"
			},
			"4030": {
				"info": "This event occurs when the player picks up a mushroom by clicking on it, or begins dragging a mushroom. It contains information about the mushroom that was picked up and the position of the mushroom. This event is used to calculate accuracy and to diagnose player strategies and understanding.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "height of the mushroom that was picked up",
						"type": "int",
						"name": "height"
					},
					{
						"info": "list of mushroom heights placed on the stumps from left to right after the placement occurs",
						"type": "array->int",
						"name": "stumps"
					},
					{
						"info": "the game screen coordinates of the placement\n{“x”: integer, “y”: integer, “stage_width”: integer, “stage_height”: integer}",
						"type": "object",
						"name": "coordinates"
					},
					{
						"info": "“left”, “middle”, “right” or “resources” - location the mushroom was dragged from",
						"type": "string",
						"name": "source"
					}
				],
				"id": "4ce349f1-fe17-436e-8aee-6198eb6f89e6"
			},
			"4035": {
				"info": "This event occurs when the player drags a mushroom to someplace other than an acceptable destination for the mushroom. It contains information about the mushroom being moved and the destination. The event should occur when the drag is released and the mushroom is placed. These events are used to diagnose player strategies and understanding.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "height of the mushroom that was dragged",
						"type": "int",
						"name": "height"
					},
					{
						"info": "“left”, “middle”, “right” or “resources” - location the mushroom was dragged from",
						"type": "string",
						"name": "source"
					},
					{
						"info": "the game screen coordinates of the placement\n{“x”: integer, “y”: integer, “stage_width”: integer, “stage_height”: integer}",
						"type": "object",
						"name": "coordinates"
					},
					{
						"info": "the duration of the drag in milliseconds",
						"type": "int",
						"name": "duration"
					}
				],
				"id": "b189c4be-0422-4f58-9fbc-e826bd79371e"
			},
			"4040": {
				"info": "This event occurs when the player drags a mushroom to the resource area. It contains information about the mushroom being moved. The event should occur when the drag is released and the mushroom is placed. These events are used to diagnose player strategies and understanding.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "height of the mushroom that was placed",
						"type": "int",
						"name": "height"
					},
					{
						"info": "the game screen coordinates of the placement\n{“x”: integer, “y”: integer, “stage_width”: integer, “stage_height”: integer}",
						"type": "object",
						"name": "coordinates"
					},
					{
						"info": "list of mushroom heights placed on the stumps from left to right after the placement occurs",
						"type": "array->int",
						"name": "stumps"
					},
					{
						"info": "“left”, “middle”, or “right” - location the mushroom was dragged from",
						"type": "string",
						"name": "source"
					},
					{
						"info": "the duration of the drag in milliseconds",
						"type": "int",
						"name": "duration"
					}
				],
				"id": "fd8dd2e7-d1e0-464d-8e6d-6ebfeb0bb3a2"
			},
			"4070": {
				"info": "This event occurs when the player clicks on something that isn’t covered elsewhere. It can be useful in determining if there are attractive distractions (things the player think should do something, but don’t) in the game, or diagnosing players who are having mechanical difficulties (near misses).",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "the game screen coordinates of the mouse click\ndictionary:\n{“x”:integer, “y”:integer, “stage_width”:integer, “stage_height”:integer}",
						"type": "object",
						"name": "coordinates"
					}
				],
				"id": "a03f4dfe-bfa2-41e1-9fea-41ef90060342"
			},
			"4080": {
				"info": "This event occurs when the player hovers the mouse over an interactive object. It contains information about the object under the mouse, and the duration of the hover. This event can be used to diagnose things like planning (are they hovering the mouse over tiles for long periods before they use those tiles), and determine which objects the player thinks are important.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "how long the mouse cursor dwells over the object when the player dwells for longer than 1sec",
						"type": "int",
						"name": "dwell_time"
					},
					{
						"info": "the object or piece of art the player clicked on",
						"type": "string",
						"name": "object"
					}
				],
				"id": "0dd4e58d-bf87-4bb7-81f6-93665f7d40ed"
			},
			"4090": {
				"info": "This event occurs when the player clicks on the help button. It contains information about the state of the game that caused the player to seek help. This event is usually followed by a 3010 (system-initiated instruction) event. It helps identify points that players feel are too difficult.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "list of mushroom heights placed on the stumps from left to right",
						"type": "array->int",
						"name": "stumps"
					},
					{
						"info": "“arranging” or “picking” – current mode when the help button is clicked",
						"type": "string",
						"name": "mode"
					}
				],
				"id": "a2c802ca-03e5-43b3-b7a4-7232b1194eb7"
			},
			"4100": {
				"info": "This event occurs when the player on the done button to submit a solution. It contains information about the mushrooms placed on the stumps and the correctness of the action. This event is used to calculate accuracy and to diagnose player strategies and understanding.",
				"args": [
					{
						"info": "millisecond count since start of game",
						"type": "int",
						"name": "game_time"
					},
					{
						"info": "were the mushrooms correctly placed?",
						"type": "boolean",
						"name": "correct"
					},
					{
						"info": "list of mushroom heights placed on the stumps from left to right",
						"type": "array->int",
						"name": "stumps"
					}
				],
				"id": "031de148-5c38-4916-a957-97728608604d"
			}
		}
	},
	"specDictionary": {
		"2025": "startPicking",
		"2035": "finishPicking",
		"4020": "placedMushroomOnStump",
		"4025": "pickedMushroom",
		"4040": "draggedToResources"
	}
}